{"ast":null,"code":"export default {\n  data() {\n    return {\n      searchQuery: \"\",\n      selectedItem: null,\n      isVisible: false,\n      cityFound: false,\n      visible: true,\n      stormy: false,\n      cloudy: false,\n      clearSky: false,\n      clearNight: false,\n      snowy: false,\n      cities: [\"New Delhi\", \"Moscow\", \"Dubai\", \"Paris\", \"London\"],\n      isDay: true,\n      citySearch: \"\",\n      weather: {\n        cityName: \"Gurgaon\",\n        country: \"IN\",\n        temperature: 24,\n        description: \"Sunny\",\n        lowTemp: \"12\",\n        highTemp: \"28\",\n        feelsLike: \"20\",\n        humidity: \"55\"\n      }\n    };\n  },\n  computed: {\n    filteredCity() {\n      const query = this.searchQuery.toLowerCase();\n      if (this.searchQuery === \"\") {\n        return this.cities;\n      }\n      return this.cities.filter(city => {\n        return Object.values(city).some(word => String(word).toLowerCase().includes(query));\n      });\n    }\n  },\n  methods: {\n    getWeather: async function () {\n      console.log(this.citySearch);\n      // this.citySearch() = \"\";\n      const key = \"20927498238fa45db83392d85885c910\";\n      const baseURL = `https://api.openweathermap.org/data/2.5/weather?q=${this.citySearch}&appid=${key}&units=metric`;\n\n      //fetch weather\n      try {\n        const response = await fetch(baseURL);\n        const data = await response.json();\n        console.log(data);\n        this.citySearch = \"\";\n        this.weather.cityName = data.name;\n        this.weather.country = data.sys.country;\n        this.weather.temperature = Math.round(data.main.temp);\n        this.weather.description = data.weather[0].description;\n        this.weather.lowTemp = Math.round(data.main.temp_min);\n        this.weather.highTemp = Math.round(data.main.temp_max);\n        this.weather.feelsLike = Math.round(data.main.feels_like);\n        this.weather.humidity = Math.round(data.main.humidity);\n        this.cities = data;\n        const timeOfDay = data.weather[0].icon;\n\n        ///check for time of day\n        if (timeOfDay.includes(\"n\")) {\n          this.isDay = false;\n        } else {\n          this.isDay = true;\n        }\n        this.visible = true;\n        this.cityFound = false;\n      } catch (error) {\n        console.log(error);\n        this.cityFound = true;\n        this.visible = false;\n      }\n    }\n  },\n  getCityWeather(city) {\n    this.searchQuery = city;\n    this.getWeather();\n  }\n};","map":{"version":3,"mappings":"AAoGA;EACAA;IACA;MACAC;MACAC;MACAC;MAEAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;MACA;IACA;EACA;EAEAC;IACAC;MACA;MACA;QACA;MACA;MACA;QACA;MACA;IACA;EACA;EAGAC;IACAC;MACAC;MACA;MACA;MACA;;MAEA;MACA;QACA;QACA;QACAA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QAEA;;QAEA;QACA;UACA;QACA;UACA;QACA;QAEA;QACA;MACA,EAEA;QACAA;QACA;QACA;MACA;IACA;EACA;EACAC;IACA;IACA;EACA;AACA","names":["data","searchQuery","selectedItem","isVisible","cityFound","visible","stormy","cloudy","clearSky","clearNight","snowy","cities","isDay","citySearch","weather","cityName","country","temperature","description","lowTemp","highTemp","feelsLike","humidity","computed","filteredCity","methods","getWeather","console","getCityWeather"],"sourceRoot":"src","sources":["App.vue"],"sourcesContent":["<!-- This weather app is created by Abhishek Yadav as a practice in vue.js as suggested mentored by Gaurav Sir -->\n\n<template>\n  \n  <div id=\"main\" :class=\"isDay ? 'day' : 'night'\">\n    <div class=\"container my-5\" style=\"max-width: 400px; min-width: 360px\">\n      <h1 class=\"title text-center\">Weather in {{ weather.cityName }}</h1>\n      <form class=\"search-location\" v-on:submit.prevent=\"getWeather\">\n          <input\n            type=\"text\"\n            class=\"form-control text-muted form-rounded p-4 shadow-sm\"\n            placeholder=\"Please type city name.\"\n            v-model=\"citySearch\"\n            autocomplete=\"off\"\n          />\n      </form> \n      <!-- This section for dropdown where i stuck in creating list in dropdown -->\n      <section class=\"dropdown-wrapper\">\n        <div v-on:click=\"isVisible = !isvisible\" class=\"selected-item\">\n          <span>Select City</span>\n            <svg\n              class=\"dropdown-icon\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              viewBox=\"0 0 24 24\"\n              width=\"24\"\n              height=\"24\"\n            >\n              <path fill=\"none\" d=\"M0 0h24v24H0z\" />\n              <path d=\"M12 10.828l-4.95 4.95-1.414-1.414L12 8l6.364 6.364-1.414 1.414z\"/>\n            </svg>\n        </div>\n        <div v-if=\"isVisible\" class=\"dropdown-popover\">\n          <div class=\"options\">\n            <ul>\n              <!-- <li v-for=\"(city, index) in filteredCity\" v-on:key=\"`city-${index}`\">{{ city }}</li> -->\n            </ul>\n          </div>\n        </div>\n      </section>\n        <p class=\"text-center my-3\" v-if=\"cityFound\">No city found</p>\n      <div class=\"card rounded my-3 shadow-lg back-card overflow-hidden\"  v-if = \"visible\">\n\n        <!-- city name and country name starts here -->\n        <div id=\"cardview\" class=\"card-top text-center\" style=\"margin-bottom: 15rem\">\n          <div class=\"city-name my-3\">\n            <p>{{ weather.cityName }}</p>\n            <span>...</span>\n            <p>{{ weather.country }}</p>\n          </div>\n        </div>\n        <!-- city name and country name ends here -->\n\n        <!-- card body start -->\n        <div class=\"card-body\">\n          <!-- card middle start -->\n          <div class=\"card-mid\">\n            <div class=\"row\">\n              <div class=\"col-12 text-center temp\">\n                <span>{{ weather.temperature }}째C</span>\n                <p class=\"my-4\">{{ weather.description }}</p>\n              </div>\n            </div>\n            <div class=\"row\">\n              <div class=\"col d-flex justify-content-between px-5 mx-5\">\n                <p>\n                  <img src=\"./assets/down.svg\" alt=\"down\" />\n                  {{ weather.lowTemp }}째C\n                </p>\n                <p>\n                  <img src=\"./assets/up.svg\" alt=\"up\" />\n                  {{ weather.highTemp }}째C\n                </p>\n              </div>\n            </div>\n          </div>\n          <!-- card middle end -->\n\n          <!-- card bottom start -->\n          <div class=\"card-bottom px-5 py-4 row\">\n            <div class=\"col text-center\">\n              <p>{{ weather.feelsLike }}째C</p>\n              <span>Feels like</span>\n            </div>\n            <div class=\"col text-center\">\n              <p>{{ weather.humidity }}%</p>\n              <span>humidity</span>\n            </div>\n          </div>\n          <!-- card bottom end -->\n\n        </div>\n        <!-- card body end -->\n\n      </div>\n    </div>\n  </div>\n</template>\n \n<script>\n\nexport default {\n  data() {\n    return {\n      searchQuery: \"\",\n      selectedItem: null,\n      isVisible: false,\n\n      cityFound: false,\n      visible: true,\n      stormy: false,\n      cloudy: false,\n      clearSky: false,\n      clearNight: false,\n      snowy: false,\n      cities: [\"New Delhi\", \"Moscow\", \"Dubai\", \"Paris\", \"London\"],\n      isDay: true,\n      citySearch: \"\",\n      weather: {\n        cityName: \"Gurgaon\",\n        country: \"IN\",\n        temperature: 24,\n        description: \"Sunny\",\n        lowTemp: \"12\",\n        highTemp: \"28\",\n        feelsLike: \"20\",\n        humidity: \"55\",\n      },\n    };\n  },\n\n  computed: {\n    filteredCity(){\n       const query = this.searchQuery.toLowerCase()\n       if(this.searchQuery === \"\"){\n        return this.cities;\n       }\n       return this.cities.filter((city) =>{\n        return Object.values(city).some((word) => String(word).toLowerCase().includes(query));\n       });\n    },\n  },\n  \n\n  methods: {\n    getWeather: async function () {\n      console.log(this.citySearch);\n      // this.citySearch() = \"\";\n      const key = \"20927498238fa45db83392d85885c910\";\n      const baseURL = `https://api.openweathermap.org/data/2.5/weather?q=${this.citySearch}&appid=${key}&units=metric`;\n\n      //fetch weather\n      try {\n        const response = await fetch(baseURL);\n        const data = await response.json();\n        console.log(data);\n        this.citySearch = \"\";\n        this.weather.cityName = data.name;\n        this.weather.country = data.sys.country;\n        this.weather.temperature = Math.round(data.main.temp);\n        this.weather.description = data.weather[0].description;\n        this.weather.lowTemp = Math.round(data.main.temp_min);\n        this.weather.highTemp = Math.round(data.main.temp_max);\n        this.weather.feelsLike = Math.round(data.main.feels_like);\n        this.weather.humidity = Math.round(data.main.humidity);\n        this.cities = data;\n\n        const timeOfDay = data.weather[0].icon;\n\n        ///check for time of day\n        if (timeOfDay.includes(\"n\")) {\n          this.isDay = false;\n        } else {\n          this.isDay = true;\n        }\n\n        this.visible = true;\n        this.cityFound = false;\n      } \n\n      catch (error) {\n        console.log(error);\n        this.cityFound = true;\n        this.visible = false;\n      }\n    },\n  },\n  getCityWeather(city) {\n    this.searchQuery = city;\n    this.getWeather();\n  },\n};\n\n</script>\n\n<style>\n@import \"./assets/custom.css\";\n@import \"./assets/animation.css\";\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}