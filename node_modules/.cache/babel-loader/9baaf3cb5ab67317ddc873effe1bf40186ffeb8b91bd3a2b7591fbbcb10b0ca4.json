{"ast":null,"code":"export default {\n  data() {\n    return {\n      searchQuery: \"\",\n      selectedItem: null,\n      isVisible: false,\n      cityFound: false,\n      visible: true,\n      stormy: false,\n      cloudy: false,\n      clearSky: false,\n      clearNight: false,\n      snowy: false,\n      cities: [\"New Delhi\", \"Moscow\", \"Dubai\", \"Paris\", \"London\"],\n      isDay: true,\n      citySearch: \"\",\n      weather: {\n        cityName: \"Gurgaon\",\n        country: \"IN\",\n        temperature: 24,\n        description: \"Sunny\",\n        lowTemp: \"12\",\n        highTemp: \"28\",\n        feelsLike: \"20\",\n        humidity: \"55\"\n      }\n    };\n  },\n  computed: {\n    filteredCity() {\n      const query = this.searchQuery.toLowerCase();\n      if (this.searchQuery === \"\") {\n        return this.cities;\n      }\n      return this.cities.filter(city => {\n        return Object.values(city).some(word => String(word).toLowerCase().includes(query));\n      });\n    }\n  },\n  methods: {\n    getWeather: async function () {\n      console.log(this.citySearch);\n      // this.citySearch() = \"\";\n      const key = \"20927498238fa45db83392d85885c910\";\n      const baseURL = `https://api.openweathermap.org/data/2.5/weather?q=${this.citySearch}&appid=${key}&units=metric`;\n\n      //fetch weather\n      try {\n        const response = await fetch(baseURL);\n        const data = await response.json();\n        console.log(data);\n        this.citySearch = \"\";\n        this.weather.cityName = data.name;\n        this.weather.country = data.sys.country;\n        this.weather.temperature = Math.round(data.main.temp);\n        this.weather.description = data.weather[0].description;\n        this.weather.lowTemp = Math.round(data.main.temp_min);\n        this.weather.highTemp = Math.round(data.main.temp_max);\n        this.weather.feelsLike = Math.round(data.main.feels_like);\n        this.weather.humidity = Math.round(data.main.humidity);\n        this.cities = data;\n        const timeOfDay = data.weather[0].icon;\n\n        ///check for time of day\n        if (timeOfDay.includes(\"n\")) {\n          this.isDay = false;\n        } else {\n          this.isDay = true;\n        }\n        this.visible = true;\n        this.cityFound = false;\n      } catch (error) {\n        console.log(error);\n        this.cityFound = true;\n        this.visible = false;\n      }\n    }\n  },\n  getCityWeather(city) {\n    this.searchQuery = city;\n    this.getWeather();\n  }\n};","map":{"version":3,"mappings":"AAwGA;EACAA;IACA;MACAC;MACAC;MACAC;MAEAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;MACA;IACA;EACA;EAEAC;IACAC;MACA;MACA;QACA;MACA;MACA;QACA;MACA;IACA;EACA;EAGAC;IACAC;MACAC;MACA;MACA;MACA;;MAEA;MACA;QACA;QACA;QACAA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QAEA;;QAEA;QACA;UACA;QACA;UACA;QACA;QAEA;QACA;MACA,EAEA;QACAA;QACA;QACA;MACA;IACA;EACA;EACAC;IACA;IACA;EACA;AACA","names":["data","searchQuery","selectedItem","isVisible","cityFound","visible","stormy","cloudy","clearSky","clearNight","snowy","cities","isDay","citySearch","weather","cityName","country","temperature","description","lowTemp","highTemp","feelsLike","humidity","computed","filteredCity","methods","getWeather","console","getCityWeather"],"sourceRoot":"src","sources":["App.vue"],"sourcesContent":["<!-- This weather app is created by Abhishek Yadav as a practice in vue.js as suggested mentored by Gaurav Sir -->\r\n\r\n<template>\r\n  \r\n  <div id=\"main\" :class=\"isDay ? 'day' : 'night'\">\r\n    <div class=\"container my-5\" style=\"max-width: 400px; min-width: 360px\">\r\n      <h1 class=\"main-head\">Weather in {{ weather.cityName }}</h1>\r\n      <i class=\"baseicon-search\"> ::before </i>\r\n      <div class=\"search-location\" v-on:submit.prevent=\"getWeather\">\r\n          <input\r\n            type=\"text\"\r\n            class=\"form-control text-muted form-rounded p-4 shadow-sm\"\r\n            placeholder=\"Please type city name.\"\r\n            v-model=\"citySearch\"\r\n            autocomplete=\"off\"\r\n          />\r\n      </div> <button type=\"button\" class=\"btn btn-primary\" fdprocessedid=\"gu0wv9\" style=\"\">\r\n            <i class=\"fas fa-search\"></i>\r\n          </button>\r\n      \r\n      <!-- This section for dropdown where i stuck in creating list in dropdown -->\r\n      <section class=\"dropdown-wrapper\">\r\n        <div v-on:click=\"isVisible = !isvisible\" class=\"selected-item\">\r\n          <span>Select City</span>\r\n            <svg\r\n              class=\"dropdown-icon\"\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              viewBox=\"0 0 24 24\"\r\n              width=\"24\"\r\n              height=\"24\"\r\n            >\r\n              <path fill=\"none\" d=\"M0 0h24v24H0z\" />\r\n              <path d=\"M12 10.828l-4.95 4.95-1.414-1.414L12 8l6.364 6.364-1.414 1.414z\"/>\r\n            </svg>\r\n        </div>\r\n        <div v-if=\"isVisible\" class=\"dropdown-popover\">\r\n          <div class=\"options\">\r\n            <ul>\r\n              <!-- <li v-for=\"(city, index) in filteredCity\" v-on:key=\"`city-${index}`\">{{ city }}</li> -->\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </section>\r\n        <p class=\"text-center my-3\" v-if=\"cityFound\">No city found</p>\r\n      <div class=\"card rounded my-3 shadow-lg back-card overflow-hidden\"  v-if = \"visible\">\r\n\r\n        <!-- city name and country name starts here -->\r\n        <div id=\"cardview\" class=\"card-top text-center\" style=\"margin-bottom: 15rem\">\r\n          <div class=\"city-name my-3\">\r\n            <p>{{ weather.cityName }}</p>\r\n            <span>...</span>\r\n            <p>{{ weather.country }}</p>\r\n          </div>\r\n        </div>\r\n        <!-- city name and country name ends here -->\r\n\r\n        <!-- card body start -->\r\n        <div class=\"card-body\">\r\n          <!-- card middle start -->\r\n          <div class=\"card-mid\">\r\n            <div class=\"row\">\r\n              <div class=\"col-12 text-center temp\">\r\n                <span>{{ weather.temperature }}째C</span>\r\n                <p class=\"my-4\">{{ weather.description }}</p>\r\n              </div>\r\n            </div>\r\n            <div class=\"row\">\r\n              <div class=\"col d-flex justify-content-between px-5 mx-5\">\r\n                <p>\r\n                  <img src=\"./assets/down.svg\" alt=\"down\" />\r\n                  {{ weather.lowTemp }}째C\r\n                </p>\r\n                <p>\r\n                  <img src=\"./assets/up.svg\" alt=\"up\" />\r\n                  {{ weather.highTemp }}째C\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <!-- card middle end -->\r\n\r\n          <!-- card bottom start -->\r\n          <div class=\"card-bottom px-5 py-4 row\">\r\n            <div class=\"col text-center\">\r\n              <p>{{ weather.feelsLike }}째C</p>\r\n              <span>Feels like</span>\r\n            </div>\r\n            <div class=\"col text-center\">\r\n              <p>{{ weather.humidity }}%</p>\r\n              <span>humidity</span>\r\n            </div>\r\n          </div>\r\n          <!-- card bottom end -->\r\n\r\n        </div>\r\n        <!-- card body end -->\r\n\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n \r\n<script>\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      searchQuery: \"\",\r\n      selectedItem: null,\r\n      isVisible: false,\r\n\r\n      cityFound: false,\r\n      visible: true,\r\n      stormy: false,\r\n      cloudy: false,\r\n      clearSky: false,\r\n      clearNight: false,\r\n      snowy: false,\r\n      cities: [\"New Delhi\", \"Moscow\", \"Dubai\", \"Paris\", \"London\"],\r\n      isDay: true,\r\n      citySearch: \"\",\r\n      weather: {\r\n        cityName: \"Gurgaon\",\r\n        country: \"IN\",\r\n        temperature: 24,\r\n        description: \"Sunny\",\r\n        lowTemp: \"12\",\r\n        highTemp: \"28\",\r\n        feelsLike: \"20\",\r\n        humidity: \"55\",\r\n      },\r\n    };\r\n  },\r\n\r\n  computed: {\r\n    filteredCity(){\r\n       const query = this.searchQuery.toLowerCase()\r\n       if(this.searchQuery === \"\"){\r\n        return this.cities;\r\n       }\r\n       return this.cities.filter((city) =>{\r\n        return Object.values(city).some((word) => String(word).toLowerCase().includes(query));\r\n       });\r\n    },\r\n  },\r\n  \r\n\r\n  methods: {\r\n    getWeather: async function () {\r\n      console.log(this.citySearch);\r\n      // this.citySearch() = \"\";\r\n      const key = \"20927498238fa45db83392d85885c910\";\r\n      const baseURL = `https://api.openweathermap.org/data/2.5/weather?q=${this.citySearch}&appid=${key}&units=metric`;\r\n\r\n      //fetch weather\r\n      try {\r\n        const response = await fetch(baseURL);\r\n        const data = await response.json();\r\n        console.log(data);\r\n        this.citySearch = \"\";\r\n        this.weather.cityName = data.name;\r\n        this.weather.country = data.sys.country;\r\n        this.weather.temperature = Math.round(data.main.temp);\r\n        this.weather.description = data.weather[0].description;\r\n        this.weather.lowTemp = Math.round(data.main.temp_min);\r\n        this.weather.highTemp = Math.round(data.main.temp_max);\r\n        this.weather.feelsLike = Math.round(data.main.feels_like);\r\n        this.weather.humidity = Math.round(data.main.humidity);\r\n        this.cities = data;\r\n\r\n        const timeOfDay = data.weather[0].icon;\r\n\r\n        ///check for time of day\r\n        if (timeOfDay.includes(\"n\")) {\r\n          this.isDay = false;\r\n        } else {\r\n          this.isDay = true;\r\n        }\r\n\r\n        this.visible = true;\r\n        this.cityFound = false;\r\n      } \r\n\r\n      catch (error) {\r\n        console.log(error);\r\n        this.cityFound = true;\r\n        this.visible = false;\r\n      }\r\n    },\r\n  },\r\n  getCityWeather(city) {\r\n    this.searchQuery = city;\r\n    this.getWeather();\r\n  },\r\n};\r\n\r\n</script>\r\n\r\n<style>\r\n@import \"./assets/custom.css\";\r\n@import \"./assets/animation.css\";\r\n</style>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}